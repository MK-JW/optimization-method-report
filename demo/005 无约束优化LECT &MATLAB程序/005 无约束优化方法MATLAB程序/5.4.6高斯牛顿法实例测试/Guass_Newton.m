function [x_optimal,F_optimal,k]=Guass_Newton(F_test,G_test,J_test,x_initial,tolerance)
%==========================================================================
%函数调用格式：
%[x_optimal,F_optimal,k]=Guass_Newton(@F_test,@G_test,@J_test,x_initial,tolerance)
%--------------------------------------------------------------------------
%输入参数说明
%--------------------------------------------------------------------------
%f_test：单个的目标函数，矢量
%F_test：所有f_test中方程的平方和
%G_test：F对变量x的梯度
%J_test：所有f_test中方程组的Jacobi矩阵
%x_initial：指定的初始点
%tolerance:指定误差
%--------------------------------------------------------------------------
%输出参数
%--------------------------------------------------------------------------
%x_optimal：最优点
%F_optimal：F_test对应x_optimal的函数值
%k：完成高斯牛顿法所需的迭代次数
%==========================================================================
%==========================================================================
%主程序及说明
%--------------------------------------------------------------------------
%在调用本程序的上级程序中定义f_test、G_test和J_test的表达式
%x_current：牛顿法迭代过程中变量的当前点
%J_current：J_test在x_current处的函数值
%G_current：G_test在x_current处的梯度值
%H_current：F_test在x_current处的Hesse矩阵值
%d_current：F_test在x_current处的牛顿方向
%x_next:高斯牛顿法搜索到的下一点
%F_next:F(x_next)；F_next时，x_next就是方程组的解
%收敛准则：变量变化量小于tol，或，梯度值范数小于tol
%搜索步长采用Wolfe_search非精确方法（检测||G||≠0），其中步长最小值可精确到1e-15
%由于J'J必然正定或者半正定，简单采用修改对角线元素的方法，修改量越小越能保留原来Hesse矩阵的信息
%H=J'J+1e-10*I
%--------
%%[x_next,f_next]=Wolfe__Search(@F_test,@G_test,x_current,d_current)
%----
%--------------------------------------------------------------------------
k=1;
fileID2=fopen('testdata.txt','w');
fprintf(fileID2,'%5s %20s %25s\r\n','k','x^(k)','F^(k)');
n=length(x_initial);
H_modification=1e-10*eye(n);
x_current=x_initial;
F_current=F_test(x_current);
fprintf(fileID2,'%4.0f%15.4f%15.4f%15.4f\r\n',k,x_current,F_current);
G_current=G_test(x_current);
J_current=J_test(x_current);
H_current=2*(J_current')*J_current+H_modification;
d_current=-inv(H_current)*G_current;
[x_next,F_next]=Wolfe__Search(F_test,G_test,x_current,d_current);
fprintf(fileID2,'%4.0f%15.4f%15.4f%15.4f\r\n',k+1,x_next,F_next);
while(norm(x_next-x_current)>tolerance)
        k=k+1;
        x_current=x_next;
        F_current=F_test(x_current);
        G_current=G_test(x_current);
        J_current=J_test(x_current);
        H_current=2*(J_current')*J_current+H_modification;
%------------------------------------------------------------------
% |H|=0时，逆矩阵不存在，对角线元素增加微小正数，以保障H可逆
%----------------------------------------------------------------
        while(det(H_current)<1.e-8)
             H_current=H_current+H_modification;
        end
 %----------------------------------------------------------------
        d_current=-inv(H_current)*G_current;
        [x_next,F_next]=Wolfe__Search(F_test,G_test,x_current,d_current);
        fprintf(fileID2,'%4.0f%15.4f%15.4f%15.4f\r\n',k+1,x_next,F_next);
end
x_optimal=x_next;
F_optimal=F_next;
end
%==========================================================================

